version: '3.4'

x-raesenmaeher_dbconfig_env: &rmdbconfig_env
  RM_DATABASE_NAME: &rmdbname raesenmaeher
  RM_DATABASE_HOST: postgres
  RM_DATABASE_USER: &rmdbuser raesenmaeher
  # FIXME: take from env (which should be set to random)
  RM_DATABASE_PASSWORD: &rmdbpass raesenmaehertestpwd # pragma: allowlist secret


x-postgres_env: &postgres_env
  POSTGRES_PASSWORD: "FIXME: change to long random" # pragma: allowlist secret
  RAESENMAEHER_PASSWORD: *rmdbpass # pragma: allowlist secret

x-cfssl_env: &cfssl_env
    INT_SHARED_CERT_FOLDER: /ca_public
    CFSSL_BIND_ADDRESS: ${CFSSL_BIND_ADDRESS:-0.0.0.0}
    CFSSL_BIND_PORT: &cfsslport ${CFSSL_BIND_PORT:-7777}  # different from default on purpose
    CFSSL_OCSP_BIND_PORT: ${CFSSL_OCSP_BIND_PORT:-7778}  # different from default on purpose
    CFSSL_CA_NAME: ${CFSSL_CA_NAME:-localmaeher}
    OCSP_HOST: ${SERVER_DOMAIN:-localmaeher.pvarki.fi}
    OCSP_PORT: ${NGINX_HTTPS_PORT:-4440}
    CFSSL_PERSISTENT_FOLDER: /data/persistent
    OR_BIND: &or_port 7776  # different from default on purpose


services:
  cfssl:
    image: pvarki/cfssl:api-latest
    build:
      context: https://github.com/pvarki/docker-rasenmaeher-cfssl.git
      dockerfile: Dockerfile
      target: api
    environment:
      <<: *cfssl_env
    ports:
      - '7777:7777'
    networks:
      - canet
    volumes:
      - ./data/cfssl:/data/persistent
      - ./data/ca_public:/ca_public
    healthcheck:
      test: 'cfssl info -remote http://127.0.0.1:7777 || exit 1'
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  ocsprest:
    image: pvarki/cfssl:ocsprest-latest
    build:
      context: https://github.com/pvarki/docker-rasenmaeher-cfssl.git
      dockerfile: Dockerfile
      target: ocsprest
    networks:
      - canet
    environment:
      <<: *cfssl_env
      OR_PORT: *or_port
    ports:
      - '7776:7776'
    volumes:
      - ./data/cfssl:/data/persistent
      - ./data/ca_public:/ca_public
    healthcheck:
      test: 'ocsprest healthcheck --port=7776 || exit 1'
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      cfssl:
        condition: service_healthy
    restart: unless-stopped

  fpapi_init:
    image: pytestfpapi:init
    build:
      context: ptfpapi
      dockerfile: Dockerfile
      target: init
    environment:
      LOCAL_CA_CERTS_PATH: /ca_public
      CFSSL_PORT: *cfsslport
      CFSSL_HOST: "http://cfssl"
      FPAPI_HOST_NAME: "fake.localmaeher.pvarki.fi"
    volumes:
      - fpinit_data:/data/persistent
      - ./data/ca_public:/ca_public
    networks:
      - canet
    depends_on:
      cfssl:
        condition: service_healthy

  fpapi_run:
    image: pytestfpapi:run
    build:
      context: ptfpapi
      dockerfile: Dockerfile
      target: run
    environment:
      PERSISTENT_DATA_PATH: /data/persistent
      LOCAL_CA_CERTS_PATH: /ca_public
      FPAPI_BIND_ADDRESS: ${FPAPI_BIND_ADDRESS:-0.0.0.0}
      FPAPI_BIND_PORT: ${FPAPI_BIND_PORT:-7788}
      FPAPI_HOST_NAME: "fake.localmaeher.pvarki.fi"  # must match above
    ports:
      - '7788:7788'
    volumes:
      - fpinit_data:/data/persistent
      - ./data/ca_public:/ca_public
    networks:
      - canet
      - intranet
    depends_on:
      fpapi_init:
        condition: service_completed_successfully
    healthcheck:
      test: 'true'  # FIXME
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 2s

  fpapi_client:
    image: pytestfpapi:client
    build:
      context: ptfpapi
      dockerfile: Dockerfile
      target: client
    environment:
      PERSISTENT_DATA_PATH: /data/persistent
      LOCAL_CA_CERTS_PATH: /ca_public
      FPAPI_PORT: ${FPAPI_BIND_PORT:-7788}
      FPAPI_HOST_NAME: "fake.localmaeher.pvarki.fi"  # must match above
    networks:
      - intranet
    volumes:
      - fpinit_data:/data/persistent
      - ./data/ca_public:/ca_public
    depends_on:
      fpapi_init:
        condition: service_completed_successfully
      fpapi_run:
        condition: service_healthy

  postgres:
    image: postgres:12
    volumes:
      - ./pg_init:/docker-entrypoint-initdb.d
      - pg_data:/var/lib/postgresql/data
    networks:
      - intranet
    ports:
      - '5542:5432'
    environment:
      <<: *postgres_env
    healthcheck:
      test: "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s


networks:
  canet:
  intranet:

volumes:
  fpinit_data:
  pg_data:
